#include <bits/stdc++.h>

using namespace std;

#define pb push_back
#define eb emplace_back
#define mk make_pair
#define fi first
#define se second

typedef long long ll;
typedef pair<int, int> ii;
const int INF = 0x3f3f3f3f;
const double PI = acos(-1.0);

int main (void) {
    ios_base::sync_with_stdio(false);


    string number = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";


    int n = 13;
    queue<int> q;
    long long product = 1;
    int pushed_0 = 0;

    for (int i = 0; i < n; i++) {
        q.push(number[i] - '0');
        product *= q.back();

        if (q.back() == 0) pushed_0++;
    }

    long long max_product = product;
    for (int i = n+1; i < number.length(); i++) {
        int removed_value = q.front();
        q.pop();
        
        if (removed_value == 0) {
            pushed_0--;
        } else {
            product /= removed_value;
        }

        q.push(number[i] - '0');

        if (q.back() == 0) {
            pushed_0++;
        } else {
            product *= q.back();
        }

        if (pushed_0 == 0 && product > max_product) max_product = product;
    }

    printf("%lld\n", max_product);

    return 0;
}

